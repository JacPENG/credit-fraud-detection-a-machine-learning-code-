{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "305c6f8e-fec2-4dfa-9da7-b9447cef253f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: imblearn in d:\\python\\lib\\site-packages (0.0)\n",
      "Requirement already satisfied: imbalanced-learn in c:\\users\\cassiel\\appdata\\roaming\\python\\python39\\site-packages (from imblearn) (0.9.1)\n",
      "Requirement already satisfied: scikit-learn>=1.1.0 in c:\\users\\cassiel\\appdata\\roaming\\python\\python39\\site-packages (from imbalanced-learn->imblearn) (1.1.1)\n",
      "Requirement already satisfied: scipy>=1.3.2 in d:\\python\\lib\\site-packages (from imbalanced-learn->imblearn) (1.7.3)\n",
      "Requirement already satisfied: numpy>=1.17.3 in d:\\python\\lib\\site-packages (from imbalanced-learn->imblearn) (1.21.5)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in d:\\python\\lib\\site-packages (from imbalanced-learn->imblearn) (2.2.0)\n",
      "Requirement already satisfied: joblib>=1.0.0 in d:\\python\\lib\\site-packages (from imbalanced-learn->imblearn) (1.1.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install imblearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "39e74573",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import random as rnd  \n",
    "%matplotlib inline\n",
    "import plotly.express as px\n",
    "import imblearn\n",
    "#import sklearn module\n",
    "from sklearn import datasets \n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore',category=FutureWarning)\n",
    "warnings.filterwarnings('ignore',category=DeprecationWarning)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "99ed7a0a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>distance_from_home</th>\n",
       "      <th>distance_from_last_transaction</th>\n",
       "      <th>ratio_to_median_purchase_price</th>\n",
       "      <th>repeat_retailer</th>\n",
       "      <th>used_chip</th>\n",
       "      <th>used_pin_number</th>\n",
       "      <th>online_order</th>\n",
       "      <th>fraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>57.877857</td>\n",
       "      <td>0.311140</td>\n",
       "      <td>1.945940</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10.829943</td>\n",
       "      <td>0.175592</td>\n",
       "      <td>1.294219</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.091079</td>\n",
       "      <td>0.805153</td>\n",
       "      <td>0.427715</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.247564</td>\n",
       "      <td>5.600044</td>\n",
       "      <td>0.362663</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>44.190936</td>\n",
       "      <td>0.566486</td>\n",
       "      <td>2.222767</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   distance_from_home  distance_from_last_transaction  \\\n",
       "0           57.877857                        0.311140   \n",
       "1           10.829943                        0.175592   \n",
       "2            5.091079                        0.805153   \n",
       "3            2.247564                        5.600044   \n",
       "4           44.190936                        0.566486   \n",
       "\n",
       "   ratio_to_median_purchase_price  repeat_retailer  used_chip  \\\n",
       "0                        1.945940              1.0        1.0   \n",
       "1                        1.294219              1.0        0.0   \n",
       "2                        0.427715              1.0        0.0   \n",
       "3                        0.362663              1.0        1.0   \n",
       "4                        2.222767              1.0        1.0   \n",
       "\n",
       "   used_pin_number  online_order  fraud  \n",
       "0              0.0           0.0    0.0  \n",
       "1              0.0           0.0    0.0  \n",
       "2              0.0           1.0    0.0  \n",
       "3              0.0           1.0    0.0  \n",
       "4              0.0           1.0    0.0  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.read_csv('card_transdata.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b18ccb97",
   "metadata": {},
   "source": [
    "Input features:distance_from_home, distance_from_last_transaction, ratio_to_median_purchase_price, repeat_retailer, used_chip, used_pin_number, online_order\n",
    "\n",
    "Output feature:Fraud"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10430917",
   "metadata": {},
   "source": [
    "● distance_from_home - The distance from home where the transaction happened.\n",
    "\n",
    "● distance_from_last_transaction - The distance from the last transaction \n",
    "happened.\n",
    "\n",
    "● ratio_to_median_purchase_price - Ratio of purchased price transaction to \n",
    "median purchase price.\n",
    "\n",
    "● repeat_retailer - Whether the transaction happened from the same retailer.\n",
    "\n",
    "● used_chip - Whether the transaction through chip (credit card).\n",
    "\n",
    "● used_pin_number - Whether the transaction happened by using PIN number.\n",
    "\n",
    "● online_order - Whether the transaction is an online order.\n",
    "\n",
    "● fraud - Whether the transaction fraudulent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c984436d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1000000, 8)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65dcd2de",
   "metadata": {},
   "source": [
    "# Data Exploration :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "be690368",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>distance_from_home</th>\n",
       "      <th>distance_from_last_transaction</th>\n",
       "      <th>ratio_to_median_purchase_price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>57.877857</td>\n",
       "      <td>0.311140</td>\n",
       "      <td>1.945940</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10.829943</td>\n",
       "      <td>0.175592</td>\n",
       "      <td>1.294219</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.091079</td>\n",
       "      <td>0.805153</td>\n",
       "      <td>0.427715</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.247564</td>\n",
       "      <td>5.600044</td>\n",
       "      <td>0.362663</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>44.190936</td>\n",
       "      <td>0.566486</td>\n",
       "      <td>2.222767</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999995</th>\n",
       "      <td>2.207101</td>\n",
       "      <td>0.112651</td>\n",
       "      <td>1.626798</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999996</th>\n",
       "      <td>19.872726</td>\n",
       "      <td>2.683904</td>\n",
       "      <td>2.778303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999997</th>\n",
       "      <td>2.914857</td>\n",
       "      <td>1.472687</td>\n",
       "      <td>0.218075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999998</th>\n",
       "      <td>4.258729</td>\n",
       "      <td>0.242023</td>\n",
       "      <td>0.475822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999999</th>\n",
       "      <td>58.108125</td>\n",
       "      <td>0.318110</td>\n",
       "      <td>0.386920</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000000 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        distance_from_home  distance_from_last_transaction  \\\n",
       "0                57.877857                        0.311140   \n",
       "1                10.829943                        0.175592   \n",
       "2                 5.091079                        0.805153   \n",
       "3                 2.247564                        5.600044   \n",
       "4                44.190936                        0.566486   \n",
       "...                    ...                             ...   \n",
       "999995            2.207101                        0.112651   \n",
       "999996           19.872726                        2.683904   \n",
       "999997            2.914857                        1.472687   \n",
       "999998            4.258729                        0.242023   \n",
       "999999           58.108125                        0.318110   \n",
       "\n",
       "        ratio_to_median_purchase_price  \n",
       "0                             1.945940  \n",
       "1                             1.294219  \n",
       "2                             0.427715  \n",
       "3                             0.362663  \n",
       "4                             2.222767  \n",
       "...                                ...  \n",
       "999995                        1.626798  \n",
       "999996                        2.778303  \n",
       "999997                        0.218075  \n",
       "999998                        0.475822  \n",
       "999999                        0.386920  \n",
       "\n",
       "[1000000 rows x 3 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numeric_var=df[['distance_from_home','distance_from_last_transaction','ratio_to_median_purchase_price']]\n",
    "numeric_var"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ccc5043c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>repeat_retailer</th>\n",
       "      <th>used_chip</th>\n",
       "      <th>used_pin_number</th>\n",
       "      <th>online_order</th>\n",
       "      <th>fraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999995</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999996</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999997</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999998</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999999</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000000 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        repeat_retailer  used_chip  used_pin_number  online_order  fraud\n",
       "0                   1.0        1.0              0.0           0.0    0.0\n",
       "1                   1.0        0.0              0.0           0.0    0.0\n",
       "2                   1.0        0.0              0.0           1.0    0.0\n",
       "3                   1.0        1.0              0.0           1.0    0.0\n",
       "4                   1.0        1.0              0.0           1.0    0.0\n",
       "...                 ...        ...              ...           ...    ...\n",
       "999995              1.0        1.0              0.0           0.0    0.0\n",
       "999996              1.0        1.0              0.0           0.0    0.0\n",
       "999997              1.0        1.0              0.0           1.0    0.0\n",
       "999998              1.0        0.0              0.0           1.0    0.0\n",
       "999999              1.0        1.0              0.0           1.0    0.0\n",
       "\n",
       "[1000000 rows x 5 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "quali_var=df[['repeat_retailer','used_chip','used_pin_number','online_order','fraud']]\n",
    "quali_var"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3ff84579",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>distance_from_home</th>\n",
       "      <th>distance_from_last_transaction</th>\n",
       "      <th>ratio_to_median_purchase_price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1000000.000000</td>\n",
       "      <td>1000000.000000</td>\n",
       "      <td>1000000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>26.628792</td>\n",
       "      <td>5.036519</td>\n",
       "      <td>1.824182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>65.390784</td>\n",
       "      <td>25.843093</td>\n",
       "      <td>2.799589</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.004874</td>\n",
       "      <td>0.000118</td>\n",
       "      <td>0.004399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3.878008</td>\n",
       "      <td>0.296671</td>\n",
       "      <td>0.475673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>9.967760</td>\n",
       "      <td>0.998650</td>\n",
       "      <td>0.997717</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>25.743985</td>\n",
       "      <td>3.355748</td>\n",
       "      <td>2.096370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>10632.723672</td>\n",
       "      <td>11851.104565</td>\n",
       "      <td>267.802942</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       distance_from_home  distance_from_last_transaction  \\\n",
       "count      1000000.000000                  1000000.000000   \n",
       "mean            26.628792                        5.036519   \n",
       "std             65.390784                       25.843093   \n",
       "min              0.004874                        0.000118   \n",
       "25%              3.878008                        0.296671   \n",
       "50%              9.967760                        0.998650   \n",
       "75%             25.743985                        3.355748   \n",
       "max          10632.723672                    11851.104565   \n",
       "\n",
       "       ratio_to_median_purchase_price  \n",
       "count                  1000000.000000  \n",
       "mean                         1.824182  \n",
       "std                          2.799589  \n",
       "min                          0.004399  \n",
       "25%                          0.475673  \n",
       "50%                          0.997717  \n",
       "75%                          2.096370  \n",
       "max                        267.802942  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numeric_var.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b846d606",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0    881536\n",
      "0.0    118464\n",
      "Name: repeat_retailer, dtype: int64\n",
      "0.0    649601\n",
      "1.0    350399\n",
      "Name: used_chip, dtype: int64\n",
      "0.0    899392\n",
      "1.0    100608\n",
      "Name: used_pin_number, dtype: int64\n",
      "1.0    650552\n",
      "0.0    349448\n",
      "Name: online_order, dtype: int64\n",
      "0.0    912597\n",
      "1.0     87403\n",
      "Name: fraud, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(quali_var['repeat_retailer'].value_counts())\n",
    "print(quali_var['used_chip'].value_counts())\n",
    "print(quali_var['used_pin_number'].value_counts())\n",
    "print(quali_var['online_order'].value_counts())\n",
    "print(quali_var['fraud'].value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf244468",
   "metadata": {},
   "source": [
    "We can find that there are 5 categorical variables, all of which are dummy variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6c895a89",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0    881536\n",
       "0.0    118464\n",
       "Name: repeat_retailer, dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_theme(style=\"whitegrid\")\n",
    "sns.countplot(x=df.repeat_retailer,data=df, hue=df.fraud)\n",
    "df.repeat_retailer.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "59edd6ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0    649601\n",
       "1.0    350399\n",
       "Name: used_chip, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_theme(style=\"whitegrid\")\n",
    "sns.countplot(x=df.used_chip,data=df, hue=df.fraud)\n",
    "df.used_chip.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ef845035",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0    899392\n",
       "1.0    100608\n",
       "Name: used_pin_number, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_theme(style=\"whitegrid\")\n",
    "sns.countplot(x=df.used_pin_number,data=df, hue=df.fraud)\n",
    "df.used_pin_number.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "51401e12",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0    650552\n",
       "0.0    349448\n",
       "Name: online_order, dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_theme(style=\"whitegrid\")\n",
    "sns.countplot(x=df.online_order,data=df, hue=df.fraud)\n",
    "df.online_order.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a04b4229",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0    912597\n",
       "1.0     87403\n",
       "Name: fraud, dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_theme(style=\"whitegrid\")\n",
    "sns.countplot(x=df.fraud,data=df)\n",
    "df.fraud.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d24f3aaa",
   "metadata": {},
   "source": [
    "We can find that there are 3 numeric variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4cdab759",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.kdeplot(data=df, x=\"distance_from_home\", hue=\"fraud\", fill=True, common_norm=False, alpha=0.5)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "07010a20",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.kdeplot(data=df, x=\"distance_from_last_transaction\", hue=\"fraud\", fill=True, common_norm=False, alpha=0.5)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "596c386a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.kdeplot(data=df, x=\"ratio_to_median_purchase_price\", hue=\"fraud\", fill=True, common_norm=False, alpha=0.5)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f8fab17e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_2 = df.drop(columns=['fraud'])\n",
    "corr = df_2.corr()\n",
    "plt.figure(figsize=(10,6))\n",
    "plt.title('Correlation Matrix')\n",
    "sns.heatmap(corr, xticklabels = corr.columns, yticklabels = corr.columns, annot = True, cmap = \"Blues\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e4e5978",
   "metadata": {},
   "source": [
    "# Feature Engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "35f09e85",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "distance_from_home                0\n",
       "distance_from_last_transaction    0\n",
       "ratio_to_median_purchase_price    0\n",
       "repeat_retailer                   0\n",
       "used_chip                         0\n",
       "used_pin_number                   0\n",
       "online_order                      0\n",
       "fraud                             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c5312a5a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#clean the outlier\n",
    "df2=['distance_from_home','distance_from_last_transaction','ratio_to_median_purchase_price']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "68f3a470",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.boxplot(df2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d9e10f17",
   "metadata": {},
   "outputs": [],
   "source": [
    "for x in ['distance_from_home']:\n",
    "    q2,q1 = np.percentile(df.loc[:,x],[99.85,0.15])\n",
    " \n",
    "    df.loc[df[x] < q1,x] = np.nan\n",
    "    df.loc[df[x] > q2,x] = np.nan\n",
    "\n",
    "for x in ['distance_from_last_transaction']:\n",
    "    q2,q1 = np.percentile(df.loc[:,x],[99.85,0.15])\n",
    "\n",
    "    max = q2\n",
    "    min = q1\n",
    " \n",
    "    df.loc[df[x] < q1,x] = np.nan\n",
    "    df.loc[df[x] > q2,x] = np.nan\n",
    "\n",
    "for x in ['ratio_to_median_purchase_price']:\n",
    "    q2,q1 = np.percentile(df.loc[:,x],[99.85,0.15])\n",
    " \n",
    "    df.loc[df[x] < q1,x] = np.nan\n",
    "    df.loc[df[x] > q2,x] = np.nan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "c9bedd99",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "distance_from_home                3000\n",
       "distance_from_last_transaction    3000\n",
       "ratio_to_median_purchase_price    3000\n",
       "repeat_retailer                      0\n",
       "used_chip                            0\n",
       "used_pin_number                      0\n",
       "online_order                         0\n",
       "fraud                                0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "cd4f2926",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_clear = df.dropna(axis = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "e8ad2344",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>distance_from_home</th>\n",
       "      <th>distance_from_last_transaction</th>\n",
       "      <th>ratio_to_median_purchase_price</th>\n",
       "      <th>repeat_retailer</th>\n",
       "      <th>used_chip</th>\n",
       "      <th>used_pin_number</th>\n",
       "      <th>online_order</th>\n",
       "      <th>fraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>57.877857</td>\n",
       "      <td>0.311140</td>\n",
       "      <td>1.945940</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10.829943</td>\n",
       "      <td>0.175592</td>\n",
       "      <td>1.294219</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.091079</td>\n",
       "      <td>0.805153</td>\n",
       "      <td>0.427715</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.247564</td>\n",
       "      <td>5.600044</td>\n",
       "      <td>0.362663</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>44.190936</td>\n",
       "      <td>0.566486</td>\n",
       "      <td>2.222767</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999995</th>\n",
       "      <td>2.207101</td>\n",
       "      <td>0.112651</td>\n",
       "      <td>1.626798</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999996</th>\n",
       "      <td>19.872726</td>\n",
       "      <td>2.683904</td>\n",
       "      <td>2.778303</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999997</th>\n",
       "      <td>2.914857</td>\n",
       "      <td>1.472687</td>\n",
       "      <td>0.218075</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999998</th>\n",
       "      <td>4.258729</td>\n",
       "      <td>0.242023</td>\n",
       "      <td>0.475822</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999999</th>\n",
       "      <td>58.108125</td>\n",
       "      <td>0.318110</td>\n",
       "      <td>0.386920</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>991032 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        distance_from_home  distance_from_last_transaction  \\\n",
       "0                57.877857                        0.311140   \n",
       "1                10.829943                        0.175592   \n",
       "2                 5.091079                        0.805153   \n",
       "3                 2.247564                        5.600044   \n",
       "4                44.190936                        0.566486   \n",
       "...                    ...                             ...   \n",
       "999995            2.207101                        0.112651   \n",
       "999996           19.872726                        2.683904   \n",
       "999997            2.914857                        1.472687   \n",
       "999998            4.258729                        0.242023   \n",
       "999999           58.108125                        0.318110   \n",
       "\n",
       "        ratio_to_median_purchase_price  repeat_retailer  used_chip  \\\n",
       "0                             1.945940              1.0        1.0   \n",
       "1                             1.294219              1.0        0.0   \n",
       "2                             0.427715              1.0        0.0   \n",
       "3                             0.362663              1.0        1.0   \n",
       "4                             2.222767              1.0        1.0   \n",
       "...                                ...              ...        ...   \n",
       "999995                        1.626798              1.0        1.0   \n",
       "999996                        2.778303              1.0        1.0   \n",
       "999997                        0.218075              1.0        1.0   \n",
       "999998                        0.475822              1.0        0.0   \n",
       "999999                        0.386920              1.0        1.0   \n",
       "\n",
       "        used_pin_number  online_order  fraud  \n",
       "0                   0.0           0.0    0.0  \n",
       "1                   0.0           0.0    0.0  \n",
       "2                   0.0           1.0    0.0  \n",
       "3                   0.0           1.0    0.0  \n",
       "4                   0.0           1.0    0.0  \n",
       "...                 ...           ...    ...  \n",
       "999995              0.0           0.0    0.0  \n",
       "999996              0.0           0.0    0.0  \n",
       "999997              0.0           1.0    0.0  \n",
       "999998              0.0           1.0    0.0  \n",
       "999999              0.0           1.0    0.0  \n",
       "\n",
       "[991032 rows x 8 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clear"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "985cb696",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0    906224\n",
       "1.0     84808\n",
       "Name: fraud, dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clear.fraud.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1cf783d7",
   "metadata": {},
   "source": [
    "# Train test split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "c991f662",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X = df_clear.drop('fraud',axis = 1)\n",
    "y = df_clear.fraud\n",
    "X_train_im,X_test_im,y_train_im,y_test_im = train_test_split(X,y,test_size = 0.2 , random_state = 1)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "97dc86f2-ba85-4755-870f-f3697532c64e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 99103 entries, 359893 to 96812\n",
      "Data columns (total 8 columns):\n",
      " #   Column                          Non-Null Count  Dtype  \n",
      "---  ------                          --------------  -----  \n",
      " 0   distance_from_home              99103 non-null  float64\n",
      " 1   distance_from_last_transaction  99103 non-null  float64\n",
      " 2   ratio_to_median_purchase_price  99103 non-null  float64\n",
      " 3   repeat_retailer                 99103 non-null  float64\n",
      " 4   used_chip                       99103 non-null  float64\n",
      " 5   used_pin_number                 99103 non-null  float64\n",
      " 6   online_order                    99103 non-null  float64\n",
      " 7   fraud                           99103 non-null  float64\n",
      "dtypes: float64(8)\n",
      "memory usage: 6.8 MB\n"
     ]
    }
   ],
   "source": [
    "df_subset=df_clear.sample(frac=0.1,random_state=42)\n",
    "df_subset.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "5fa9c5c5-39b1-4824-9f2c-a8709ac97db1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0    90548\n",
       "1.0     8555\n",
       "Name: fraud, dtype: int64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_subset['fraud'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "edc4957f-bc6c-44bb-8359-8c23256c053b",
   "metadata": {},
   "outputs": [],
   "source": [
    "X1 = df_subset.drop('fraud',axis = 1)\n",
    "y1 = df_subset.fraud\n",
    "X1_train_im,X1_test_im,y1_train_im,y1_test_im = train_test_split(X1,y1,test_size = 0.2 , random_state = 1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7943b571",
   "metadata": {},
   "source": [
    "# Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "3f93a401",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import needed packages\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.pipeline import Pipeline\n",
    "import joblib\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score,confusion_matrix, classification_report\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from imblearn.over_sampling import SMOTE\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore',category=FutureWarning)\n",
    "warnings.filterwarnings('ignore',category=DeprecationWarning)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "53d31a1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from imblearn.pipeline import make_pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "48dc2059",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pipeline(steps=[('minmaxscaler', MinMaxScaler()), ('smote', SMOTE()),\n",
      "                ('logisticregression', LogisticRegression(random_state=99))])\n",
      "Pipeline(steps=[('minmaxscaler', MinMaxScaler()), ('smote', SMOTE()),\n",
      "                ('decisiontreeclassifier',\n",
      "                 DecisionTreeClassifier(random_state=21))])\n",
      "Pipeline(steps=[('minmaxscaler', MinMaxScaler()), ('smote', SMOTE()),\n",
      "                ('randomforestclassifier',\n",
      "                 RandomForestClassifier(random_state=45))])\n",
      "Pipeline(steps=[('minmaxscaler', MinMaxScaler()), ('smote', SMOTE()),\n",
      "                ('svc', SVC(random_state=60))])\n"
     ]
    }
   ],
   "source": [
    "# Construct some pipelines: we create different piplines for different models \n",
    "\n",
    "pipe1_im = make_pipeline(MinMaxScaler(),SMOTE(),LogisticRegression(random_state=99))\n",
    "print(pipe1_im)\n",
    "\n",
    "pipe2_im = make_pipeline(MinMaxScaler(),SMOTE(),DecisionTreeClassifier(random_state=21))\n",
    "print(pipe2_im)\n",
    "\n",
    "pipe3_im = make_pipeline(MinMaxScaler(),SMOTE(),RandomForestClassifier(random_state=45))\n",
    "print(pipe3_im)\n",
    "\n",
    "pipe4_im = make_pipeline(MinMaxScaler(),SMOTE(),SVC(random_state=60))\n",
    "\n",
    "print(pipe4_im)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "f1238b0d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# defining the params for hyper-parameters\n",
    "params_dc = dict(decisiontreeclassifier__criterion=['gini', 'entropy'],\n",
    "                 decisiontreeclassifier__max_depth=[2, 4, 6, 8, 10],\n",
    "                decisiontreeclassifier__min_samples_leaf=[3,5,7,9])\n",
    "\n",
    "params_rf = dict(randomforestclassifier__n_estimators=[int(x) for x in np.linspace(start =50, stop=300,num=50)],\n",
    "              randomforestclassifier__max_depth=[2,5,10],\n",
    "               randomforestclassifier__max_features = ['auto','sqrt'],\n",
    "               randomforestclassifier__min_samples_split = [2,5,10])\n",
    "#params_rf = dict(randomforestclassifier__n_estimators=[20,50],\n",
    "             #randomforestclassifier__max_depth=[2,5,10],\n",
    "           #randomforestclassifier__max_features = ['auto'],\n",
    "            #    randomforestclassifier__min_samples_split = [2,5,10])           \n",
    "params_svc = dict(svc__C = [0.1,1,5,10],\n",
    "              svc__kernel = ['linear','rbf'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "48a65e19",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'decisiontreeclassifier__criterion': 'entropy', 'decisiontreeclassifier__max_depth': 8, 'decisiontreeclassifier__min_samples_leaf': 5}\n",
      "    mean_fit_time  std_fit_time  mean_score_time  std_score_time  \\\n",
      "0       25.053858      1.604874         0.246137        0.020839   \n",
      "1       24.407622      2.260472         0.425476        0.459489   \n",
      "2       26.658461      6.569653         0.339326        0.215159   \n",
      "3       33.340237      6.092589         0.664173        0.675074   \n",
      "4       37.590635      2.197137         0.516623        0.082521   \n",
      "5       39.916580      1.685796         0.366632        0.073741   \n",
      "6       21.438896      9.678431         0.724842        0.641457   \n",
      "7       14.260175      1.201924         0.321563        0.140802   \n",
      "8       19.664588      5.388769         0.493970        0.158179   \n",
      "9       25.516766      0.428322         0.488619        0.055787   \n",
      "10      23.889753      1.705454         0.472471        0.068228   \n",
      "11      23.035721      1.627125         0.461085        0.067171   \n",
      "12      23.551547      2.194823         0.394479        0.030947   \n",
      "13      21.264369      2.187919         0.757354        0.377689   \n",
      "14      30.609147     14.255568         0.548582        0.279471   \n",
      "15      40.956699      2.740583         0.230854        0.076410   \n",
      "16      40.075778      0.444744         0.269591        0.079378   \n",
      "17      37.480096      2.679532         0.421922        0.167717   \n",
      "18      38.197195      1.099504         0.498855        0.369584   \n",
      "19      36.379947      2.593383         0.397515        0.298144   \n",
      "20      37.108715      6.534311         0.226005        0.112298   \n",
      "21      24.312401      4.909994         2.922586        2.120674   \n",
      "22      23.934010      2.677805         2.301665        1.418981   \n",
      "23      23.548453      3.224102         2.446292        1.505934   \n",
      "24      25.381269      2.534220         0.927706        0.690006   \n",
      "25      24.246925      2.043626         1.056816        0.735390   \n",
      "26      24.090879      2.446591         1.273412        0.685537   \n",
      "27      25.887263      7.787606         0.331920        0.136118   \n",
      "28      30.082568      1.840920         0.362678        0.131741   \n",
      "29      28.539167      2.134464         0.542366        0.412136   \n",
      "30      30.007597      0.531909         0.277773        0.086247   \n",
      "31      28.848534      2.833509         0.610537        0.694005   \n",
      "32      23.478667      2.147021         1.159013        0.646604   \n",
      "33      23.596121      2.166319         0.378204        0.184434   \n",
      "34      27.006829      2.053991         0.271181        0.204430   \n",
      "35      27.641547      1.103322         0.215164        0.045157   \n",
      "36      25.738229      0.628081         0.290090        0.088689   \n",
      "37      24.208156      2.106118         0.305143        0.118559   \n",
      "38      24.575199      0.372592         0.230244        0.032476   \n",
      "39      23.997510      0.111845         0.278484        0.033524   \n",
      "\n",
      "   param_decisiontreeclassifier__criterion  \\\n",
      "0                                     gini   \n",
      "1                                     gini   \n",
      "2                                     gini   \n",
      "3                                     gini   \n",
      "4                                     gini   \n",
      "5                                     gini   \n",
      "6                                     gini   \n",
      "7                                     gini   \n",
      "8                                     gini   \n",
      "9                                     gini   \n",
      "10                                    gini   \n",
      "11                                    gini   \n",
      "12                                    gini   \n",
      "13                                    gini   \n",
      "14                                    gini   \n",
      "15                                    gini   \n",
      "16                                    gini   \n",
      "17                                    gini   \n",
      "18                                    gini   \n",
      "19                                    gini   \n",
      "20                                 entropy   \n",
      "21                                 entropy   \n",
      "22                                 entropy   \n",
      "23                                 entropy   \n",
      "24                                 entropy   \n",
      "25                                 entropy   \n",
      "26                                 entropy   \n",
      "27                                 entropy   \n",
      "28                                 entropy   \n",
      "29                                 entropy   \n",
      "30                                 entropy   \n",
      "31                                 entropy   \n",
      "32                                 entropy   \n",
      "33                                 entropy   \n",
      "34                                 entropy   \n",
      "35                                 entropy   \n",
      "36                                 entropy   \n",
      "37                                 entropy   \n",
      "38                                 entropy   \n",
      "39                                 entropy   \n",
      "\n",
      "   param_decisiontreeclassifier__max_depth  \\\n",
      "0                                        2   \n",
      "1                                        2   \n",
      "2                                        2   \n",
      "3                                        2   \n",
      "4                                        4   \n",
      "5                                        4   \n",
      "6                                        4   \n",
      "7                                        4   \n",
      "8                                        6   \n",
      "9                                        6   \n",
      "10                                       6   \n",
      "11                                       6   \n",
      "12                                       8   \n",
      "13                                       8   \n",
      "14                                       8   \n",
      "15                                       8   \n",
      "16                                      10   \n",
      "17                                      10   \n",
      "18                                      10   \n",
      "19                                      10   \n",
      "20                                       2   \n",
      "21                                       2   \n",
      "22                                       2   \n",
      "23                                       2   \n",
      "24                                       4   \n",
      "25                                       4   \n",
      "26                                       4   \n",
      "27                                       4   \n",
      "28                                       6   \n",
      "29                                       6   \n",
      "30                                       6   \n",
      "31                                       6   \n",
      "32                                       8   \n",
      "33                                       8   \n",
      "34                                       8   \n",
      "35                                       8   \n",
      "36                                      10   \n",
      "37                                      10   \n",
      "38                                      10   \n",
      "39                                      10   \n",
      "\n",
      "   param_decisiontreeclassifier__min_samples_leaf  \\\n",
      "0                                               3   \n",
      "1                                               5   \n",
      "2                                               7   \n",
      "3                                               9   \n",
      "4                                               3   \n",
      "5                                               5   \n",
      "6                                               7   \n",
      "7                                               9   \n",
      "8                                               3   \n",
      "9                                               5   \n",
      "10                                              7   \n",
      "11                                              9   \n",
      "12                                              3   \n",
      "13                                              5   \n",
      "14                                              7   \n",
      "15                                              9   \n",
      "16                                              3   \n",
      "17                                              5   \n",
      "18                                              7   \n",
      "19                                              9   \n",
      "20                                              3   \n",
      "21                                              5   \n",
      "22                                              7   \n",
      "23                                              9   \n",
      "24                                              3   \n",
      "25                                              5   \n",
      "26                                              7   \n",
      "27                                              9   \n",
      "28                                              3   \n",
      "29                                              5   \n",
      "30                                              7   \n",
      "31                                              9   \n",
      "32                                              3   \n",
      "33                                              5   \n",
      "34                                              7   \n",
      "35                                              9   \n",
      "36                                              3   \n",
      "37                                              5   \n",
      "38                                              7   \n",
      "39                                              9   \n",
      "\n",
      "                                               params  split0_test_score  \\\n",
      "0   {'decisiontreeclassifier__criterion': 'gini', ...           0.931296   \n",
      "1   {'decisiontreeclassifier__criterion': 'gini', ...           0.931296   \n",
      "2   {'decisiontreeclassifier__criterion': 'gini', ...           0.931296   \n",
      "3   {'decisiontreeclassifier__criterion': 'gini', ...           0.931296   \n",
      "4   {'decisiontreeclassifier__criterion': 'gini', ...           0.994002   \n",
      "5   {'decisiontreeclassifier__criterion': 'gini', ...           0.994002   \n",
      "6   {'decisiontreeclassifier__criterion': 'gini', ...           0.994002   \n",
      "7   {'decisiontreeclassifier__criterion': 'gini', ...           0.994002   \n",
      "8   {'decisiontreeclassifier__criterion': 'gini', ...           0.999899   \n",
      "9   {'decisiontreeclassifier__criterion': 'gini', ...           0.999905   \n",
      "10  {'decisiontreeclassifier__criterion': 'gini', ...           0.999905   \n",
      "11  {'decisiontreeclassifier__criterion': 'gini', ...           0.999905   \n",
      "12  {'decisiontreeclassifier__criterion': 'gini', ...           0.999975   \n",
      "13  {'decisiontreeclassifier__criterion': 'gini', ...           0.999975   \n",
      "14  {'decisiontreeclassifier__criterion': 'gini', ...           0.999950   \n",
      "15  {'decisiontreeclassifier__criterion': 'gini', ...           0.999943   \n",
      "16  {'decisiontreeclassifier__criterion': 'gini', ...           0.999968   \n",
      "17  {'decisiontreeclassifier__criterion': 'gini', ...           0.999975   \n",
      "18  {'decisiontreeclassifier__criterion': 'gini', ...           0.999943   \n",
      "19  {'decisiontreeclassifier__criterion': 'gini', ...           0.999975   \n",
      "20  {'decisiontreeclassifier__criterion': 'entropy...           0.931296   \n",
      "21  {'decisiontreeclassifier__criterion': 'entropy...           0.931296   \n",
      "22  {'decisiontreeclassifier__criterion': 'entropy...           0.931296   \n",
      "23  {'decisiontreeclassifier__criterion': 'entropy...           0.931296   \n",
      "24  {'decisiontreeclassifier__criterion': 'entropy...           0.994002   \n",
      "25  {'decisiontreeclassifier__criterion': 'entropy...           0.994002   \n",
      "26  {'decisiontreeclassifier__criterion': 'entropy...           0.994002   \n",
      "27  {'decisiontreeclassifier__criterion': 'entropy...           0.994002   \n",
      "28  {'decisiontreeclassifier__criterion': 'entropy...           0.999899   \n",
      "29  {'decisiontreeclassifier__criterion': 'entropy...           0.999886   \n",
      "30  {'decisiontreeclassifier__criterion': 'entropy...           0.999912   \n",
      "31  {'decisiontreeclassifier__criterion': 'entropy...           0.999905   \n",
      "32  {'decisiontreeclassifier__criterion': 'entropy...           0.999968   \n",
      "33  {'decisiontreeclassifier__criterion': 'entropy...           0.999968   \n",
      "34  {'decisiontreeclassifier__criterion': 'entropy...           0.999956   \n",
      "35  {'decisiontreeclassifier__criterion': 'entropy...           0.999956   \n",
      "36  {'decisiontreeclassifier__criterion': 'entropy...           0.999962   \n",
      "37  {'decisiontreeclassifier__criterion': 'entropy...           0.999962   \n",
      "38  {'decisiontreeclassifier__criterion': 'entropy...           0.999956   \n",
      "39  {'decisiontreeclassifier__criterion': 'entropy...           0.999975   \n",
      "\n",
      "    split1_test_score  split2_test_score  split3_test_score  \\\n",
      "0            0.930117           0.930685           0.930514   \n",
      "1            0.930117           0.930691           0.930514   \n",
      "2            0.930117           0.930685           0.930527   \n",
      "3            0.930117           0.930672           0.930514   \n",
      "4            0.994362           0.994066           0.993965   \n",
      "5            0.994356           0.994072           0.993996   \n",
      "6            0.994356           0.994066           0.993965   \n",
      "7            0.994356           0.994053           0.993965   \n",
      "8            0.999943           0.999968           0.999937   \n",
      "9            0.999950           0.999968           0.999937   \n",
      "10           0.999950           0.999937           0.999937   \n",
      "11           0.999950           0.999956           0.999950   \n",
      "12           0.999968           0.999950           0.999981   \n",
      "13           0.999962           0.999950           0.999968   \n",
      "14           0.999968           0.999924           0.999975   \n",
      "15           0.999968           0.999962           0.999962   \n",
      "16           0.999968           0.999931           0.999968   \n",
      "17           0.999968           0.999956           0.999962   \n",
      "18           0.999950           0.999943           0.999975   \n",
      "19           0.999962           0.999937           0.999962   \n",
      "20           0.930117           0.930685           0.930527   \n",
      "21           0.930117           0.930685           0.930514   \n",
      "22           0.930117           0.930691           0.930514   \n",
      "23           0.930117           0.930703           0.930521   \n",
      "24           0.994362           0.994084           0.993996   \n",
      "25           0.994356           0.994072           0.993958   \n",
      "26           0.994356           0.994053           0.993958   \n",
      "27           0.994356           0.994066           0.994002   \n",
      "28           0.999943           0.999950           0.999924   \n",
      "29           0.999943           0.999962           0.999924   \n",
      "30           0.999943           0.999943           0.999937   \n",
      "31           0.999943           0.999956           0.999924   \n",
      "32           0.999962           0.999950           0.999968   \n",
      "33           0.999975           0.999975           0.999968   \n",
      "34           0.999975           0.999950           0.999962   \n",
      "35           0.999981           0.999968           0.999962   \n",
      "36           0.999981           0.999968           0.999943   \n",
      "37           0.999975           0.999956           0.999981   \n",
      "38           0.999975           0.999950           0.999975   \n",
      "39           0.999950           0.999962           0.999962   \n",
      "\n",
      "    split4_test_score  mean_test_score  std_test_score  rank_test_score  \n",
      "0            0.931687         0.930860        0.000562               38  \n",
      "1            0.931687         0.930861        0.000561               36  \n",
      "2            0.931687         0.930862        0.000560               34  \n",
      "3            0.931687         0.930857        0.000562               40  \n",
      "4            0.994229         0.994125        0.000149               27  \n",
      "5            0.994229         0.994131        0.000140               26  \n",
      "6            0.994229         0.994124        0.000147               29  \n",
      "7            0.994229         0.994121        0.000148               31  \n",
      "8            0.999905         0.999931        0.000026               19  \n",
      "9            0.999924         0.999937        0.000021               17  \n",
      "10           0.999918         0.999929        0.000016               23  \n",
      "11           0.999918         0.999936        0.000020               18  \n",
      "12           0.999962         0.999967        0.000011                3  \n",
      "13           0.999943         0.999960        0.000012               12  \n",
      "14           0.999950         0.999953        0.000018               15  \n",
      "15           0.999968         0.999961        0.000009                9  \n",
      "16           0.999962         0.999960        0.000015               12  \n",
      "17           0.999937         0.999960        0.000013               12  \n",
      "18           0.999950         0.999952        0.000012               16  \n",
      "19           0.999968         0.999961        0.000013                9  \n",
      "20           0.931687         0.930862        0.000560               34  \n",
      "21           0.931687         0.930860        0.000562               38  \n",
      "22           0.931687         0.930861        0.000561               36  \n",
      "23           0.931687         0.930865        0.000560               33  \n",
      "24           0.994229         0.994135        0.000141               25  \n",
      "25           0.994236         0.994125        0.000149               27  \n",
      "26           0.994236         0.994121        0.000151               31  \n",
      "27           0.994179         0.994121        0.000134               30  \n",
      "28           0.999924         0.999928        0.000018               24  \n",
      "29           0.999931         0.999929        0.000025               21  \n",
      "30           0.999912         0.999929        0.000015               22  \n",
      "31           0.999924         0.999931        0.000017               19  \n",
      "32           0.999962         0.999962        0.000007                7  \n",
      "33           0.999962         0.999970        0.000005                1  \n",
      "34           0.999968         0.999962        0.000009                7  \n",
      "35           0.999975         0.999968        0.000009                2  \n",
      "36           0.999968         0.999965        0.000012                5  \n",
      "37           0.999956         0.999966        0.000010                4  \n",
      "38           0.999962         0.999963        0.000010                6  \n",
      "39           0.999956         0.999961        0.000008                9  \n"
     ]
    }
   ],
   "source": [
    "# Fit the pipelines\n",
    "\n",
    "#Grid Search CV - DC\n",
    "gcv_dc_im=GridSearchCV(pipe2_im,param_grid=params_dc,n_jobs=-1).fit(X_train_im,y_train_im)\n",
    "print(gcv_dc_im.best_params_)\n",
    "print(pd.DataFrame(gcv_dc_im.cv_results_))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "5eec1aaa-70f1-451d-92e4-ab72287bfdf1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'svc__C': 10, 'svc__kernel': 'rbf'}\n",
      "   mean_fit_time  std_fit_time  mean_score_time  std_score_time param_svc__C  \\\n",
      "0    2116.271524     16.312904         7.984255        0.194865          0.1   \n",
      "1    2126.092436     12.990553        13.133280        0.251677          0.1   \n",
      "2    2076.250350     44.301439         6.983631        0.775699            1   \n",
      "3    2098.795495     60.798415         8.793655        1.458397            1   \n",
      "4    1962.265464    226.971152         8.046866        1.272333            5   \n",
      "5    1074.041075    480.247598         7.313332        0.488052            5   \n",
      "6     913.012820    936.089762         7.888724        1.042500           10   \n",
      "7     595.874221    400.086227         6.635542        1.235001           10   \n",
      "\n",
      "  param_svc__kernel                                    params  \\\n",
      "0            linear  {'svc__C': 0.1, 'svc__kernel': 'linear'}   \n",
      "1               rbf     {'svc__C': 0.1, 'svc__kernel': 'rbf'}   \n",
      "2            linear    {'svc__C': 1, 'svc__kernel': 'linear'}   \n",
      "3               rbf       {'svc__C': 1, 'svc__kernel': 'rbf'}   \n",
      "4            linear    {'svc__C': 5, 'svc__kernel': 'linear'}   \n",
      "5               rbf       {'svc__C': 5, 'svc__kernel': 'rbf'}   \n",
      "6            linear   {'svc__C': 10, 'svc__kernel': 'linear'}   \n",
      "7               rbf      {'svc__C': 10, 'svc__kernel': 'rbf'}   \n",
      "\n",
      "   split0_test_score  split1_test_score  split2_test_score  split3_test_score  \\\n",
      "0           0.931071           0.928612           0.933085           0.931509   \n",
      "1           0.953459           0.950432           0.953141           0.954276   \n",
      "2           0.933279           0.932837           0.934977           0.934914   \n",
      "3           0.968468           0.966576           0.966700           0.967772   \n",
      "4           0.934162           0.933279           0.935671           0.935734   \n",
      "5           0.974396           0.973513           0.973827           0.975467   \n",
      "6           0.934855           0.932963           0.935608           0.935545   \n",
      "7           0.977486           0.976856           0.977043           0.979503   \n",
      "\n",
      "   split4_test_score  mean_test_score  std_test_score  rank_test_score  \n",
      "0           0.928797         0.930615        0.001699                8  \n",
      "1           0.952510         0.952764        0.001297                4  \n",
      "2           0.931950         0.933591        0.001186                7  \n",
      "3           0.966133         0.967130        0.000859                3  \n",
      "4           0.932455         0.934260        0.001296                6  \n",
      "5           0.973259         0.974092        0.000785                2  \n",
      "6           0.932392         0.934273        0.001341                5  \n",
      "7           0.976224         0.977422        0.001117                1  \n"
     ]
    }
   ],
   "source": [
    "#Grid Search CV - RF\n",
    "gcv_rf_im=GridSearchCV(pipe3_im,param_grid=params_rf,n_jobs=-1).fit(X_train_im,y_train_im)\n",
    "print(gcv_rf_im.best_params_)\n",
    "print(pd.DataFrame(gcv_rf_im.cv_results_))\n",
    "#Grid Search CV - SVC\n",
    "gcv_svc_im=GridSearchCV(pipe4_im,param_grid=params_svc,n_jobs=-1).fit(X1_train_im,y1_train_im)\n",
    "print(gcv_svc_im.best_params_)\n",
    "print(pd.DataFrame(gcv_svc_im.cv_results_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "30282aec",
   "metadata": {},
   "outputs": [],
   "source": [
    "from imblearn.pipeline import Pipeline as imbpipeline\n",
    "from sklearn.model_selection import cross_val_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "bd5a36e6-2f0c-4af4-a1d2-12091e0f4fb8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LOG 0.936 0.0002\n"
     ]
    }
   ],
   "source": [
    "pipeline_logim = imbpipeline(steps = [['minmaxscaler', MinMaxScaler()],\n",
    "                                ['smote', SMOTE(random_state=11)],\n",
    "                                ['classifier', LogisticRegression(random_state=99)]])\n",
    "LOG_best_im = cross_val_score(estimator=pipeline_logim, X=X_train_im, y=y_train_im, cv=5)\n",
    "print('LOG', round(LOG_best_im.mean(),3), round(LOG_best_im.std(),4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "d11df037-5369-4e34-aee1-292ff9731a9e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.93648661 0.93634156 0.93632895 0.9359001  0.93617759]\n"
     ]
    }
   ],
   "source": [
    "print(LOG_best_im)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "6b8bb134-ec1e-450c-8598-b49ae0178630",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DC 1.0 0.0\n"
     ]
    }
   ],
   "source": [
    "pipeline_dcim = imbpipeline(steps = [['minmaxscaler', MinMaxScaler()],\n",
    "                                ['smote', SMOTE(random_state=11)],\n",
    "                                ['classifier', DecisionTreeClassifier(random_state=21,max_depth=8,min_samples_leaf=5,criterion='entropy')]])\n",
    "\n",
    "DC_best_im = cross_val_score(estimator=pipeline_dcim, X=X_train_im, y=y_train_im, cv=5)\n",
    "print('DC', round(DC_best_im.mean(),3), round(DC_best_im.std(),4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "4695b488-b5fd-4417-86cd-c09a9509fd04",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.99998108 0.99996847 0.99991171 0.99994324 0.99994955]\n",
      "DC 0.9999508088165736 2e-05\n"
     ]
    }
   ],
   "source": [
    "print(DC_best_im)\n",
    "print('DC',DC_best_im.mean(), round(DC_best_im.std(),5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "d9c721aa-0950-4f5d-8dda-dc03cf633e7d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RF 1.0 0.0\n"
     ]
    }
   ],
   "source": [
    "pipeline_rfim = imbpipeline(steps = [['minmaxscaler', MinMaxScaler()],\n",
    "                               ['smote', SMOTE(random_state=11)],\n",
    "                              ['classifier', RandomForestClassifier(random_state=45,n_estimators=100,max_depth=10,\n",
    "                                                                    max_features = 'auto',min_samples_split=2)]])\n",
    "RF_best_im = cross_val_score(estimator=pipeline_rfim, X=X_train_im, y=y_train_im, cv=5)\n",
    "print('RF', round(RF_best_im.mean().mean(),3),round(RF_best_im.std(),4))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "e2f9efd2-562b-475c-85b4-70bd094bb753",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RF 0.9999836029388579 1e-05\n",
      "[0.99998739 0.99998739 0.99997477 0.99999369 0.99997477]\n"
     ]
    }
   ],
   "source": [
    "print('RF', RF_best_im.mean(),round(RF_best_im.std(),5))\n",
    "print(RF_best_im)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "c92df06d-8a47-4953-ae98-7bf2dd68a4c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVC 0.977 0.0012\n"
     ]
    }
   ],
   "source": [
    "pipeline_svmim = imbpipeline(steps = [['minmaxscaler', MinMaxScaler()],\n",
    "                               ['smote', SMOTE(random_state=11)],\n",
    "                              ['classifier', SVC(random_state=60,C=10,kernel=\"rbf\")]])\n",
    "SVC_best_im  =cross_val_score(pipeline_svmim, X=X1_train_im, y=y1_train_im, cv=5)\n",
    "print('SVC', round(SVC_best_im.mean(),3), round(SVC_best_im.std(),4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "310ca0f9-aa7d-44aa-a581-f0a7817db153",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.97723403 0.97666646 0.97710646 0.9797553  0.97666498]\n"
     ]
    }
   ],
   "source": [
    "print(SVC_best_im)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "34e18f60",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "#LOG_best_im = cross_val_score(estimator=pipeline_logim, X=X_train_im, y=y_train_im, cv=5)\n",
    "#DC_best_im = cross_val_score(estimator=pipeline_dcim, X=X_train_im, y=y_train_im, cv=5)\n",
    "#RF_best_im = cross_val_score(estimator=pipeline_rfim, X=X_train_im, y=y_train_im, cv=5)\n",
    "#SVC_best_im  =cross_val_score(pipeline_svmim, X=X_train_im, y=y_train_im, cv=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "582b6cf5-4ace-456d-aa4c-47e0eb0e561a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DC 1.0 0.0\n"
     ]
    }
   ],
   "source": [
    "#print('LOG', round(LOG_best_im.mean(),3), round(LOG_best_im.std(),4))\n",
    "#print('DC', round(DC_best_im.mean(),3), round(DC_best_im.std(),4))\n",
    "#print('RF', round(RF_best_im.mean().mean(),3),round(RF_best_im.std(),4))\n",
    "#print('SVC', round(SVC_best_im.mean(),3), round(SVC_best_im.std(),4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "630bf67a-ebbd-416b-b768-75d8396a1b5c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0    725124\n",
      "1.0    725124\n",
      "Name: fraud, dtype: int64\n",
      "(1450248, 7) (1450248,)\n"
     ]
    }
   ],
   "source": [
    "from imblearn.over_sampling import SMOTE\n",
    "over_samplers =SMOTE()\n",
    "X_smote,y_smote = over_samplers.fit_resample(X_train_im,y_train_im)\n",
    "y_smote =pd.Series(y_smote)\n",
    "print(y_smote.value_counts())\n",
    "print(X_smote.shape,y_smote.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "fb329189-a993-471f-b42f-f5aaff3a8143",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_smote = pd.concat([pd.DataFrame(X_smote) , pd.DataFrame(y_smote)] , axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "5e8e8edd-fa12-4fd4-ba0a-43ff6b111177",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0    725124\n",
       "1.0    725124\n",
       "Name: fraud, dtype: int64"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_theme(style=\"whitegrid\")\n",
    "sns.countplot(x=df_smote.fraud,data=df_smote)\n",
    "df_smote.fraud.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "f0af21f0-35e0-4af1-aab3-1969e05e1236",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0    912597\n",
       "1.0     87403\n",
       "Name: fraud, dtype: int64"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_theme(style=\"whitegrid\")\n",
    "sns.countplot(x=df.fraud,data=df)\n",
    "df.fraud.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "a2db0a04-096d-4706-9735-d20e80b61ab7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0    72453\n",
      "1.0    72453\n",
      "Name: fraud, dtype: int64\n",
      "(144906, 7) (144906,)\n"
     ]
    }
   ],
   "source": [
    "X1_smote,y1_smote = over_samplers.fit_resample(X1_train_im,y1_train_im)\n",
    "y1_smote =pd.Series(y1_smote)\n",
    "print(y1_smote.value_counts())\n",
    "print(X1_smote.shape,y1_smote.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "7e37ddbc-7667-43a8-b917-504867d5d8b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/network/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:444: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    }
   ],
   "source": [
    "SVC_im_final = SVC(random_state=60,C=10,kernel=\"rbf\",probability=True).fit(X1_smote, y1_smote)\n",
    "LOG_im_final = LogisticRegression(random_state=99).fit(X_smote, y_smote)\n",
    "DC_im_final = DecisionTreeClassifier(random_state=21,max_depth=8,min_samples_leaf=5,criterion='entropy').fit(X_smote, y_smote)\n",
    "RF_im_final = RandomForestClassifier(random_state=45,n_estimators=100,max_depth=10,\n",
    "                max_features = 'auto',min_samples_split=2).fit(X_smote, y_smote)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "d0838915-eea6-4e7d-ad56-f50506521308",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import svm, datasets\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import label_binarize\n",
    "from sklearn.multiclass import OneVsRestClassifier\n",
    "from sklearn.metrics import roc_auc_score\n",
    "from sklearn import metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "dbd6e805-0223-4f22-9f41-8ad49e1ba8fc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[169651,  11449],\n",
       "       [   766,  16341]])"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
    "#logistic\n",
    "y_test_predict_log_im=LOG_im_final.predict(X_test_im)\n",
    "cm_log_im = confusion_matrix(y_test_im, y_test_predict_log_im)\n",
    "cm_log_im"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "016fc35d-7c8b-42af-b80b-a1df9c3bb2c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy: 0.9383725095480987 precision: 0.5880172724001439 recall: 0.9552230081253288 F1_score: 0.7279328240194223\n"
     ]
    }
   ],
   "source": [
    "print(\"accuracy:\",accuracy_score(y_test_im, y_test_predict_log_im),\n",
    "      \"precision:\",precision_score(y_test_im, y_test_predict_log_im),\n",
    "     \"recall:\",recall_score(y_test_im, y_test_predict_log_im),\n",
    "     \"F1_score:\",f1_score(y_test_im, y_test_predict_log_im))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "949b3738-9127-4ae4-8165-ba2b1ade9995",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC=0.981\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compute ROC curve and AUC\n",
    "y_pred_proba = LOG_im_final.predict_proba(X_test_im)[::,1]\n",
    "ns_probs = [0 for _ in range(len(y_test_im))]\n",
    "\n",
    "#\n",
    "ns_auc = roc_auc_score(y_test_im, ns_probs)\n",
    "lr_auc = roc_auc_score(y_test_im, y_pred_proba)\n",
    "ns_fpr, ns_tpr, _ = roc_curve(y_test_im, ns_probs)\n",
    "lr_fpr, lr_tpr, _ = roc_curve(y_test_im, y_pred_proba)\n",
    "\n",
    "print('AUC=%.3f' % (lr_auc))\n",
    "\n",
    "plt.plot(ns_fpr, ns_tpr, linestyle='--', label='/')\n",
    "plt.plot(lr_fpr, lr_tpr, label='ROC')\n",
    "\n",
    "plt.xlabel('True Positive Rate')\n",
    "plt.ylabel('False Positive Rate')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "c9c3d155-17bf-49dd-bec8-11d7b3a9c82f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[181098,      2],\n",
       "       [    10,  17097]])"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#decision tree\n",
    "y_test_predict_dc_im=DC_im_final.predict(X_test_im)\n",
    "cm_dc_im = confusion_matrix(y_test_im, y_test_predict_dc_im)\n",
    "cm_dc_im"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "3fd02a37-6c44-4745-b564-92c1cde928fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy: 0.9999394572341037 precision: 0.9998830340955611 recall: 0.9994154439703046 F1_score: 0.9996491843536223\n"
     ]
    }
   ],
   "source": [
    "print(\"accuracy:\",accuracy_score(y_test_im, y_test_predict_dc_im),\n",
    "      \"precision:\",precision_score(y_test_im, y_test_predict_dc_im),\n",
    "     \"recall:\",recall_score(y_test_im, y_test_predict_dc_im),\n",
    "     \"F1_score:\",f1_score(y_test_im, y_test_predict_dc_im))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "7d0ff4c8-1da0-466b-8ad5-b417820c8f4b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ratio_to_median_purchase_price</td>\n",
       "      <td>0.435</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>distance_from_home</td>\n",
       "      <td>0.248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>distance_from_last_transaction</td>\n",
       "      <td>0.144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>online_order</td>\n",
       "      <td>0.085</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>used_pin_number</td>\n",
       "      <td>0.040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>used_chip</td>\n",
       "      <td>0.034</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>repeat_retailer</td>\n",
       "      <td>0.013</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          feature  importance\n",
       "2  ratio_to_median_purchase_price       0.435\n",
       "0              distance_from_home       0.248\n",
       "1  distance_from_last_transaction       0.144\n",
       "6                    online_order       0.085\n",
       "5                 used_pin_number       0.040\n",
       "4                       used_chip       0.034\n",
       "3                 repeat_retailer       0.013"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#feature importance\n",
    "import pandas as pd\n",
    "importances = pd.DataFrame({'feature':X_train_im.columns,'importance':np.round(DC_im_final.feature_importances_,3)})\n",
    "importances = importances.sort_values('importance',ascending=False)\n",
    "importances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "d72c7181-6a59-4b85-bb08-f70153a1319d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC=1.000\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compute ROC curve and ROC area for each class\n",
    "y_pred_proba1 = DC_im_final.predict_proba(X_test_im)[::,1]\n",
    "ns_probs1 = [0 for _ in range(len(y_test_im))]\n",
    "\n",
    "#\n",
    "ns_auc1 = roc_auc_score(y_test_im, ns_probs1)\n",
    "lr_auc1 = roc_auc_score(y_test_im, y_pred_proba1)\n",
    "ns_fpr1, ns_tpr1, _ = roc_curve(y_test_im, ns_probs1)\n",
    "lr_fpr1, lr_tpr1, _ = roc_curve(y_test_im, y_pred_proba1)\n",
    "\n",
    "print('AUC=%.3f' % (lr_auc1))\n",
    "\n",
    "plt.plot(ns_fpr1, ns_tpr1, linestyle='--', label='/')\n",
    "plt.plot(lr_fpr1, lr_tpr1, label='ROC')\n",
    "\n",
    "plt.xlabel('True Positive Rate')\n",
    "plt.ylabel('False Positive Rate')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "5ec5734e-611d-4136-bad7-a24e8a9f65a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[181100,      0],\n",
       "       [     2,  17105]])"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#random forest\n",
    "y_test_predict_rf_im=RF_im_final.predict(X_test_im)\n",
    "cm_rf_im = confusion_matrix(y_test_im, y_test_predict_rf_im)\n",
    "cm_rf_im"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "31cd5b11-d0c8-4a2b-9e54-8f0bf5c26b6e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy: 0.9999899095390173 precision: 1.0 recall: 0.999883088794061 F1_score: 0.9999415409797732\n"
     ]
    }
   ],
   "source": [
    "print(\"accuracy:\",accuracy_score(y_test_im, y_test_predict_rf_im),\n",
    "      \"precision:\",precision_score(y_test_im, y_test_predict_rf_im),\n",
    "     \"recall:\",recall_score(y_test_im, y_test_predict_rf_im),\n",
    "     \"F1_score:\",f1_score(y_test_im, y_test_predict_rf_im))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "93bd0d1e-ec92-4074-a4a8-8dfcba9e6368",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ratio_to_median_purchase_price</td>\n",
       "      <td>0.550</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>distance_from_home</td>\n",
       "      <td>0.200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>online_order</td>\n",
       "      <td>0.114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>distance_from_last_transaction</td>\n",
       "      <td>0.063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>used_pin_number</td>\n",
       "      <td>0.037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>used_chip</td>\n",
       "      <td>0.030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>repeat_retailer</td>\n",
       "      <td>0.008</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          feature  importance\n",
       "2  ratio_to_median_purchase_price       0.550\n",
       "0              distance_from_home       0.200\n",
       "6                    online_order       0.114\n",
       "1  distance_from_last_transaction       0.063\n",
       "5                 used_pin_number       0.037\n",
       "4                       used_chip       0.030\n",
       "3                 repeat_retailer       0.008"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#feature importance\n",
    "importances = pd.DataFrame({'feature':X_train_im.columns,'importance':np.round(RF_im_final.feature_importances_,3)})\n",
    "importances = importances.sort_values('importance',ascending=False)\n",
    "importances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "231b8ad0-4a22-4973-890a-19ae887c51cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC=0.981\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compute ROC curve and ROC area for each class\n",
    "y_pred_proba2 = RF_im_final.predict_proba(X_test_im)[::,1]\n",
    "ns_probs2 = [0 for _ in range(len(y_test_im))]\n",
    "\n",
    "#\n",
    "ns_auc2 = roc_auc_score(y_test_im, ns_probs2)\n",
    "lr_auc2 = roc_auc_score(y_test_im, y_pred_proba2)\n",
    "ns_fpr2, ns_tpr2, _ = roc_curve(y_test_im, ns_probs2)\n",
    "lr_fpr2, lr_tpr2, _ = roc_curve(y_test_im, y_pred_proba2)\n",
    "\n",
    "print('AUC=%.3f' % (lr_auc))\n",
    "\n",
    "plt.plot(ns_fpr2, ns_tpr2, linestyle='--', label='/')\n",
    "plt.plot(lr_fpr2, lr_tpr2, label='ROC')\n",
    "\n",
    "plt.xlabel('True Positive Rate')\n",
    "plt.ylabel('False Positive Rate')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "4c27b2f4-d5ee-4812-8003-515bd2b6583e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[16868,  1227],\n",
       "       [   22,  1704]])"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#SVC\n",
    "y1_test_predict_svc_im=SVC_im_final.predict(X1_test_im)\n",
    "cm_svc_im = confusion_matrix(y1_test_im, y1_test_predict_svc_im)\n",
    "cm_svc_im"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "ba1594ba-74c4-4f61-9b28-c32dc1c9eab8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy: 0.9369860249230614 precision: 0.5813715455475946 recall: 0.9872537659327926 F1_score: 0.7318015890057976\n"
     ]
    }
   ],
   "source": [
    "print(\"accuracy:\",accuracy_score(y1_test_im, y1_test_predict_svc_im),\n",
    "      \"precision:\",precision_score(y1_test_im, y1_test_predict_svc_im),\n",
    "     \"recall:\",recall_score(y1_test_im, y1_test_predict_svc_im),\n",
    "     \"F1_score:\",f1_score(y1_test_im, y1_test_predict_svc_im))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "5efcfe1a-85a0-42c9-b088-2ee1a92b5505",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC=0.990\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compute ROC curve and ROC area for each class\n",
    "y_pred_proba3 = SVC_im_final.predict_proba(X1_test_im)[::,1]\n",
    "ns_probs3 = [0 for _ in range(len(y1_test_im))]\n",
    "\n",
    "#\n",
    "ns_auc3 = roc_auc_score(y1_test_im, ns_probs3)\n",
    "lr_auc3 = roc_auc_score(y1_test_im, y_pred_proba3)\n",
    "ns_fpr3, ns_tpr3, _ = roc_curve(y1_test_im, ns_probs3)\n",
    "lr_fpr3, lr_tpr3, _ = roc_curve(y1_test_im, y_pred_proba3)\n",
    "\n",
    "print('AUC=%.3f' % (lr_auc3))\n",
    "\n",
    "plt.plot(ns_fpr3, ns_tpr3, linestyle='--', label='/')\n",
    "plt.plot(lr_fpr3, lr_tpr3, label='ROC')\n",
    "\n",
    "plt.xlabel('True Positive Rate')\n",
    "plt.ylabel('False Positive Rate')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "3bad33bb-d922-4e62-94f9-9697b6b0f4dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Recall</th>\n",
       "      <th>F1_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Random Forest</td>\n",
       "      <td>0.999990</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.999883</td>\n",
       "      <td>0.999942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Decision Tree</td>\n",
       "      <td>0.999939</td>\n",
       "      <td>0.999883</td>\n",
       "      <td>0.999415</td>\n",
       "      <td>0.999649</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Logistic Regression</td>\n",
       "      <td>0.938373</td>\n",
       "      <td>0.588017</td>\n",
       "      <td>0.955223</td>\n",
       "      <td>0.727933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Support Vector Machines</td>\n",
       "      <td>0.936986</td>\n",
       "      <td>0.581372</td>\n",
       "      <td>0.987254</td>\n",
       "      <td>0.731802</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Model  Accuracy  Precision    Recall  F1_score\n",
       "2            Random Forest  0.999990   1.000000  0.999883  0.999942\n",
       "1            Decision Tree  0.999939   0.999883  0.999415  0.999649\n",
       "0      Logistic Regression  0.938373   0.588017  0.955223  0.727933\n",
       "3  Support Vector Machines  0.936986   0.581372  0.987254  0.731802"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#模型比较\n",
    "models = pd.DataFrame({\n",
    "    'Model': [ 'Logistic Regression',  \n",
    "              'Decision Tree',\n",
    "              'Random Forest', \n",
    "              'Support Vector Machines',],\n",
    "    'Accuracy': [accuracy_score(y_test_im, y_test_predict_log_im), \n",
    "              accuracy_score(y_test_im, y_test_predict_dc_im),  \n",
    "              accuracy_score(y_test_im, y_test_predict_rf_im),\n",
    "              accuracy_score(y1_test_im, y1_test_predict_svc_im)],\n",
    "     'Precision': [precision_score(y_test_im, y_test_predict_log_im), \n",
    "              precision_score(y_test_im, y_test_predict_dc_im),  \n",
    "              precision_score(y_test_im, y_test_predict_rf_im),\n",
    "              precision_score(y1_test_im, y1_test_predict_svc_im)],\n",
    "     'Recall': [recall_score(y_test_im, y_test_predict_log_im), \n",
    "              recall_score(y_test_im, y_test_predict_dc_im),  \n",
    "              recall_score(y_test_im, y_test_predict_rf_im),\n",
    "              recall_score(y1_test_im, y1_test_predict_svc_im)],\n",
    "     'F1_score': [f1_score(y_test_im, y_test_predict_log_im), \n",
    "              f1_score(y_test_im, y_test_predict_dc_im),  \n",
    "              f1_score(y_test_im, y_test_predict_rf_im),\n",
    "              f1_score(y1_test_im, y1_test_predict_svc_im)]\n",
    "})\n",
    "\n",
    "models.sort_values(by='Accuracy', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "f02e9bb4-ce34-48f5-ad87-8c72e45ead05",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logit_AUC=0.981 DC_AUC=1.000 RM_AUC=1.000 AVM_AUC=0.990\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Compute ROC curve and AUC\n",
    "y_pred_proba = LOG_im_final.predict_proba(X_test_im)[::,1]\n",
    "ns_probs = [0 for _ in range(len(y_test_im))]\n",
    "\n",
    "#\n",
    "ns_auc = roc_auc_score(y_test_im, ns_probs)\n",
    "lr_auc = roc_auc_score(y_test_im, y_pred_proba)\n",
    "ns_fpr, ns_tpr, _ = roc_curve(y_test_im, ns_probs)\n",
    "lr_fpr, lr_tpr, _ = roc_curve(y_test_im, y_pred_proba)\n",
    "\n",
    "print('Logit_AUC=%.3f' % (lr_auc),'DC_AUC=%.3f' % (lr_auc1),'RM_AUC=%.3f' % (lr_auc2),'AVM_AUC=%.3f' % (lr_auc3))\n",
    "\n",
    "plt.plot(ns_fpr, ns_tpr, linestyle='--', label='/')\n",
    "plt.plot(lr_fpr, lr_tpr, label='Logit ROC')\n",
    "plt.plot(lr_fpr1, lr_tpr1, label='DC ROC')\n",
    "plt.plot(lr_fpr2, lr_tpr2, label='RM ROC')\n",
    "plt.plot(lr_fpr3, lr_tpr3, label='SVM ROC')\n",
    "\n",
    "plt.xlabel('True Positive Rate')\n",
    "plt.ylabel('False Positive Rate')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "e65fbd84-16a7-4c44-a83d-960298dff8b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.Series(abs(LOG_im_final.coef_[0]),index=X_train_im.columns).sort_values(ascending =True).plot(kind='barh')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "82677936-53ac-46c2-bcb5-14b984f77721",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVC(C=10, probability=True, random_state=60)\n"
     ]
    }
   ],
   "source": [
    "print((SVC_im_final))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8510b017-0ac5-4fa6-8ecb-cf099e20c226",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
